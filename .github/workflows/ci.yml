name: Build and Test

on:
  push:
    branches:
      - '**'
    paths:
      - "src/app/**"
  pull_request:
    branches: [main]
    paths:
      - "src/app/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hosseinzahed/stu-copilot/stu-copilot-app

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      src-changed: ${{ steps.filter.outputs.src }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git-based versioning

      - name: Check for changes in src folder
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'src/app/**'

  success:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.src-changed != 'true' && github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: No changes in src directory
        run: echo "No changes detected in src directory. Workflow completed successfully."

  build-and-test:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.src-changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git-based versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip
        if: ${{ hashFiles('requirements.txt') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: pip install -r requirements.txt

      - name: Install pytest
        if: ${{ hashFiles('tests/test_*.py') != '' || hashFiles('tests/**/*_test.py') != '' }}
        run: pip install pytest pytest-cov

      - name: Run Python tests
        if: ${{ hashFiles('tests/test_*.py') != '' || hashFiles('tests/**/*_test.py') != '' }}
        run: pytest src --cov=src --cov-report=xml

      - name: Upload Python coverage report
        if: ${{ hashFiles('tests/test_*.py') != '' || hashFiles('tests/**/*_test.py') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml

  build-docker-image:
    needs: build-and-test
    if: ${{ (needs.check-changes.outputs.src-changed == 'true' || github.event_name == 'workflow_dispatch') && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git-based versioning
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
      
      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
